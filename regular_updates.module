<?php

/**
 * @file
 * Sends updates to an external target about site-events.
 */

define('REGULAR_UPDATES_SETTINGS_VARNAME', 'regular_updates_settings');

define('REGULAR_UPDATES_TEMPLATE_DEFAULT', 'templates/regular_updates_email_template.tpl.php');

define('REGULAR_UPDATES_NEXT_EXECUTE_VARNAME', 'regular_updates_next_execute');

// The structure of the settings array.
define('REGULAR_UPDATES_SETTINGS', serialize(array(
  'target_api_enabled' => 0,
  'target_api_urls' => array(),

  'target_email_enabled' => 0,
  'target_email_emails' => array(),
  'target_email_custom_template_enabled' => 0,
  'target_email_custom_template' => REGULAR_UPDATES_TEMPLATE_DEFAULT,

  'enabled_events' => array(
    'nodes' => 1,
    'users' => 1,
    'forum' => 1
  ),

  'interval' => 'daily',
  'trigger_hour' => '00'
)));

define('REGULAR_UPDATES_EVENT_OPTIONS', serialize(array(
  'nodes' => t('Nodes'),
  'users' => t('Users'),
  'forum' => t('Forum'),
)));

define('REGULAR_UPDATES_INTERVAL_OPTIONS', serialize(array(
  'daily' => t('Daily'),
  'weekly' => t('Weekly'),
  'bi-monthly' => t('Every two weeks'),
  'monthly' => t('Monthly')
)));

// We're using strtotime instead of UNIX times, so the code
// doesn't break at daylight savings. ;)
define('REGULAR_UPDATES_INTERVAL_STATEMENTS', serialize(array(
  'daily' => '+1 day',
  'weekly' => '+7 day',
  'bi-monthly' => '+14 day',
  'monthly' => '+1 month'
)));

define('REGULAR_UPDATES_EVENT_DATA_VARNAMES', serialize(array(
  'nodes' => 'regular_updates_event_data_nodes',
  'users' => 'regular_udpates_event_data_users',
  'forum' => 'regular_udpates_event_data_forum',
)));

/**
 * Implements hook_admin().
 * Configuration page for the module.
 */
function regular_updates_admin() {
  $form = array();

  $current_values = _regular_updates_get_settings();

  // todo
  $templates_detected = [
    REGULAR_UPDATES_TEMPLATE_DEFAULT => 'Default Template File'
  ];

  /*
   * Target: API
   */
  $form['target_api_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#prefix' => '<h2>' . t('Target settings: API') . '</h2>',
    '#default_value' => $current_values['target_api_enabled'],
    '#options' => [TRUE => 'Enabled', FALSE => 'Disabled'], // this wont work - fix it.
  );

  $form['target_api_urls'] = array(
    '#type' => 'textarea',
    '#default_value' => $current_values['target_api_urls'],
    '#title' => t('API URLs (comma seperated)'),
  );

  /*
   * Target: Email
   */
  $form['target_email_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#prefix' => '<h2>' . t('Target settings: Email') . '</h2>',
    '#default_value' => $current_values['target_email_enabled'],
    '#options' => ['Enabled' => TRUE, 'Disabled' => FALSE], // this wont work - fix it.
  );

  $form['target_email_emails'] = array(
    '#type' => 'textarea',
    '#default_value' => $current_values['target_email_emails'],
    '#title' => t('Emails (comma seperated)'),
  );

  /*
   * Target: Templates
   */
  $form['target_email_custom_template_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable email custom template'),
    '#default_value' => $current_values['target_email_custom_template_enabled'],
    '#options' => ['Enabled' => TRUE, 'Disabled' => FALSE], // this wont work - fix it.
  );

  $form['target_email_custom_template'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Custom template file to use, if enabled above'),
    '#default_value' => $current_values['target_email_custom_template'],
    '#options' => $templates_detected
  );

  /*
   * Target: Events
   */
  $form['events_enable'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable events'),
    '#default_value' => $current_values['enabled_events'],
    '#options' => unserialize(REGULAR_UPDATES_EVENT_OPTIONS)
  );

  /*
   * Target: Intervals
   */
  $form['interval'] = array(
    '#type' => 'select',
    '#title' => t('Select interval'),
    '#required' => TRUE,
    '#default_value' => $current_values['interval'],
    '#options' => unserialize(REGULAR_UPDATES_INTERVAL_OPTIONS)
  );

  /*
   * Target: Trigger Hours
   */


  // Creating an array of 24, with starting zeros.
  $hours;

  for ($value = 0; $value <= 24; $value++) {
    if ($value <= 9) {
      // Making it 2digit 24H format.
      $value = '0' . $value;
    }

    $hours[$value] = $value . ':00';
  }

  $form['trigger_hour'] = array(
    '#type' => 'select',
    '#title' => t('Select closest hour to send out events'),
    '#required' => TRUE,
    '#default_value' => $current_values['trigger_hour'],
    '#description' => t('The precision of this totally depends on your current setup (How often the CRON runs). The more often you run cron, the more precise this (and other modules) will be - however it may slow your site.'),
    '#options' => $hours
  );

  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 * Link for configuration pages.
 */
function regular_updates_menu() {
  $items = array();

  $items['admin/settings/regular_updates'] = array(
    'title' => t('Regular Updates'),
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regular_updates_admin'),
    'access arguments' => array('administer regular updates settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Implements hook_admin_validate().
 * Manipulating and checking data before it's sent.
 */
function regular_updates_admin_validate($form, &$form_state) {
  $regular_updates_values = array(
    'target_api_enabled' => $form_state['values']['target_api_enable'],
    'target_email_enabled' => $form_state['values']['target_email_enable'],
    'target_api_urls' => $form_state['values']['target_api_urls'],
    'target_email_emails' => $form_state['values']['target_email_emails'],
    'target_email_custom_template_enabled' => $form_state['values']['target_email_custom_template_enable'],
    'enabled_events' => $form_state['values']['events_enable'],
    'target_email_custom_template' => $form_state['values']['target_email_custom_template'],
    'interval' => $form_state['values']['interval'],
    'trigger_hour' => $form_state['values']['trigger_hour']
  );

  variable_set(REGULAR_UPDATES_SETTINGS_VARNAME, json_encode($regular_updates_values));
}

/*
 * Implements hook_cron().
 * The cron trigger to send out data.
 */
function regular_updates_cron() {
  $current_settings = _regular_updates_get_settings();

  // Getting the strtotime statement (e.g. "+1 day").
  $interval_statements = unserialize(REGULAR_UPDATES_INTERVAL_STATEMENTS);
  $interval_statement = $interval_statements[$current_settings['interval']];

  $next_execute = variable_get(REGULAR_UPDATES_NEXT_EXECUTE_VARNAME);

  if (!$next_execute) {
    variable_set(REGULAR_UPDATES_NEXT_EXECUTE_VARNAME, strtotime($interval_statement));

    return;
  }

  $trigger_hour = $current_settings['trigger_hour'];

  // We're adding 10 minutes to the trigger time, as the cron most likely will be set up to run every hour,
  // and we want it to run as close to the selected trigger hour as possible.
  $trigger_time = $trigger_hour . ':10';

  //todo - check for trigger hour also
  if (time() >= $next_execute){

    watchdog('regular_updates_cron', 'Module "Regular Updates" sent out updates');

    // We're sending the now static settings array along, as we
    // dont want the values to change half-way through.
    _regular_updates_send_data($current_settings);
  }
}

/*
 * Custom helper function for sending out external data.
 */
function _regular_updates_send_data($settings) {

  $data = _regular_updates_create_data($settings);


  if (!is_null($email_data)){
    $target_emails = $settings['target_email_emails'];

    //todo

    foreach ($target_emails as $email) {

    }
  }

  if (!is_null($url_data)){
    $target_urls = $settings['target_api_urls'];

    //todo: test

    foreach ($target_urls as $url) {
      drupal_http_request($url, $options = array('data' => $url_data));
    }
  }
}

/*
 * Custom helper function for creating the data to be sent out.
 */
function _regular_updates_create_data($settings) {
  $data = array();
  $url_data = NULL;
  $email_data = NULL;

  $event_data_variables = unserialize(REGULAR_UPDATES_EVENT_DATA_VARNAMES);

  foreach ($event_data_variables as $key => $value) {
    $event_data = variable_get($value);

    if ($event_data) {
      $data[$key] = json_decode($event_data);
    }

    else {
      $data[$key] = array();
    }
  }

  if ($settings['target_email_enabled'] == 1) {
    // Generate the email template
    // maybe as a helper function?

  }

  if ($settings['target_api_enabled'] == 1) {
    $url_data = json_encode($data);
  }

  return array(
    'email_data' => $email_data,
    'url_data' => $url_data
  );
}

/*
 * Custom helper function for getting settings
 * returns settings array.
 * If values are not set, it will return the default template.
 */
function _regular_updates_get_settings(){
  $default_settings = unserialize(REGULAR_UPDATES_SETTINGS);

  $current_settings = variable_get(REGULAR_UPDATES_SETTINGS_VARNAME);

  if (empty($current_settings)) {
    $current_settings = $default_settings;
  }
  else {
    $current_settings = json_decode($current_settings, TRUE);
  }

  return $current_settings;

}